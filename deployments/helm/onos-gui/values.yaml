# Default values for onos-gui.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: onosproject/onos-gui
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

store:
  raftgroup: onos-gui
  controller: atomix-controller.kube-system.svc.cluster.local:5679

## Client service.
service:
  enabled: true
  ## Service name is user-configurable for maximum service discovery flexibility.
  name: onos-gui
  type: ClusterIP

ingress:
  enabled: true

ports:
  web:
    containerPort: 80
    protocol: TCP

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

Envoy:
  image:
    repository: envoyproxy/envoy
    tag: v1.11.1
    pullPolicy: IfNotPresent

  command:
    - /usr/local/bin/envoy
  args:
    - -l
    - $loglevel
    - -c
    - /config/envoy.yaml

  ## Args template allows you to use Chart template expressions to dynamically generate args
  # argsTemplate: |-
  #   - -c
  #   - /docker-entrypoint.sh envoy --service-node ${POD_NAME} --service-cluster {{ template "envoy.fullname" . }} -l debug -c /config/envoy.yaml

  ## Client service.
  service:
    enabled: true
    ## Service name is user-configurable for maximum service discovery flexibility.
    name: onos-envoy
    type: ClusterIP
    ## Ignored if the type is not LoadBalancer or if the IP is empty string
    loadBalancerIP: ""
    annotations: {}
      ## AWS example for use with LoadBalancer service type.
      # external-dns.alpha.kubernetes.io/hostname: envoy.cluster.local
    # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    ports:
      n0:
        port: 8080
        targetPort: n0
        protocol: TCP
      n1:
        port: 8081
        targetPort: n1
        protocol: TCP

  ports:
    admin:
      containerPort: 9901
      protocol: TCP
    n0:
      containerPort: 8080
      protocol: TCP
    n1:
      containerPort: 8081
      protocol: TCP

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
  #   cpu: 100m
  #   memory: 128Mi

  priorityClassName: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}
    # podAntiAffinity:
    #   preferredDuringSchedulingIgnoredDuringExecution:
    #     - weight: 50
    #       podAffinityTerm:
    #         topologyKey: failure-domain.beta.kubernetes.io/zone
    #         labelSelector:
    #           matchLabels:
    #             release: envoy
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     - weight: 40
    #       topologyKey: "kubernetes.io/hostname"
    #       labelSelector:
  #         matchLabels:
  #           release: envoy

  ## ref: https://github.com/envoyproxy/envoy/pull/2896
  podAnnotations: {}
    # prometheus.io/scrape: "true"
  # prometheus.io/path: "/stats/prometheus"
  # prometheus.io/port: "9901"

  podLabels: {}
  # team: "developers"
  # service: "envoy"

  livenessProbe:
    tcpSocket:
      port: admin
    initialDelaySeconds: 30
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 3
    # successThreshold: 1

  readinessProbe:
    tcpSocket:
      port: admin
    initialDelaySeconds: 30
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 3
    # successThreshold: 1

  securityContext: {}

  env: {}

  ## ServiceMonitor consumed by prometheus-operator
  serviceMonitor:
    ## If the operator is installed in your cluster, set to true to create a Service Monitor Entry
    enabled: false
    interval: "15s"
    targetLabels: []
    podTargetLabels: []
    ## Namespace in which the service monitor is created
    # namespace: monitoring
    # Added to the ServiceMonitor object so that prometheus-operator is able to discover it
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    additionalLabels: {}

  ### Lifecycle Events
  lifecycle: {}
  #  preStop:
  #    exec:
  #      command:
  #      - sh
  #      - -c
  #      - "sleep 60"

  files:
    envoy.yaml: |-
      ## refs:
      ## - https://www.envoyproxy.io/docs/envoy/latest/start/start#quick-start-to-run-simple-example
      ## - https://raw.githubusercontent.com/envoyproxy/envoy/master/configs/google_com_proxy.v2.yaml
      admin:
        access_log_path: /tmp/admin_access.log
        address:
          socket_address: { address: 0.0.0.0, port_value: 9901 }

      static_resources:
        listeners:
          - name: listener_topo
            address:
              socket_address: { address: 0.0.0.0, port_value: 8080 }
            filter_chains:
              - filters:
                  - name: envoy.http_connection_manager
                    config:
                      codec_type: auto
                      stat_prefix: ingress_http
                      route_config:
                        name: local_route
                        virtual_hosts:
                          - name: local_service
                            domains: ["*"]
                            routes:
                              - match: { prefix: "/" }
                                route:
                                  cluster: onos_topo_service
                                  max_grpc_timeout: 0s
                            cors:
                              allow_origin:
                                - "*"
                              allow_methods: GET, PUT, DELETE, POST, OPTIONS
                              allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                              max_age: "1728000"
                              expose_headers: custom-header-1,grpc-status,grpc-message
                      http_filters:
                        - name: envoy.grpc_web
                        - name: envoy.cors
                        - name: envoy.router
          - name: listener_config
            address:
              socket_address: { address: 0.0.0.0, port_value: 8081 }
            filter_chains:
              - filters:
                  - name: envoy.http_connection_manager
                    config:
                      codec_type: auto
                      stat_prefix: ingress_http
                      route_config:
                        name: local_route
                        virtual_hosts:
                          - name: local_service
                            domains: ["*"]
                            routes:
                              - match: { prefix: "/" }
                                route:
                                  cluster: onos_config_service
                                  max_grpc_timeout: 0s
                            cors:
                              allow_origin:
                                - "*"
                              allow_methods: GET, PUT, DELETE, POST, OPTIONS
                              allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                              max_age: "1728000"
                              expose_headers: custom-header-1,grpc-status,grpc-message
                      http_filters:
                        - name: envoy.grpc_web
                        - name: envoy.cors
                        - name: envoy.router
        clusters:
          - name: onos_topo_service
            connect_timeout: 0.25s
            type: logical_dns
            http2_protocol_options: {}
            lb_policy: round_robin
            # win/mac hosts: Use address: host.docker.internal instead of address: localhost in the line below
            hosts: [{ socket_address: { address: onos-topo, port_value: 5150 }}]
            tls_context:
              common_tls_context:
                tls_certificates:
                  certificate_chain: { "filename": "/etc/envoy-proxy/certs/tls.crt" }
                  private_key: { "filename": "/etc/envoy-proxy/certs/tls.key" }
                validation_context:
                  trusted_ca: { filename: "/etc/envoy-proxy/certs/tls.cacrt" }
          - name: onos_config_service
            connect_timeout: 0.25s
            type: logical_dns
            http2_protocol_options: {}
            lb_policy: round_robin
            # win/mac hosts: Use address: host.docker.internal instead of address: localhost in the line below
            hosts: [{ socket_address: { address: onos-config, port_value: 5150 }}]
            tls_context:
              common_tls_context:
                tls_certificates:
                  certificate_chain: { "filename": "/etc/envoy-proxy/certs/tls.crt" }
                  private_key: { "filename": "/etc/envoy-proxy/certs/tls.key" }
                validation_context:
                  trusted_ca: { filename: "/etc/envoy-proxy/certs/tls.cacrt" }
