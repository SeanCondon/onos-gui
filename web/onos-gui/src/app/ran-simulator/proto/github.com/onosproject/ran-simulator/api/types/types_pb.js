// source: github.com/onosproject/ran-simulator/api/types/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.ran.trafficsim.types.Cell', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.ECGI', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.MapLayout', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.Point', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.Route', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.Sector', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.TowersParams', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.Ue', null, global);
goog.exportSymbol('proto.ran.trafficsim.types.UeMetrics', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.Point.displayName = 'proto.ran.trafficsim.types.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.Sector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.Sector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.Sector.displayName = 'proto.ran.trafficsim.types.Sector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ran.trafficsim.types.Route.repeatedFields_, null);
};
goog.inherits(proto.ran.trafficsim.types.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.Route.displayName = 'proto.ran.trafficsim.types.Route';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.Ue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.Ue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.Ue.displayName = 'proto.ran.trafficsim.types.Ue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.UeMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.UeMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.UeMetrics.displayName = 'proto.ran.trafficsim.types.UeMetrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.TowersParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.TowersParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.TowersParams.displayName = 'proto.ran.trafficsim.types.TowersParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.ECGI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.ECGI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.ECGI.displayName = 'proto.ran.trafficsim.types.ECGI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.Cell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ran.trafficsim.types.Cell.repeatedFields_, null);
};
goog.inherits(proto.ran.trafficsim.types.Cell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.Cell.displayName = 'proto.ran.trafficsim.types.Cell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ran.trafficsim.types.MapLayout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ran.trafficsim.types.MapLayout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ran.trafficsim.types.MapLayout.displayName = 'proto.ran.trafficsim.types.MapLayout';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lng: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.Point;
  return proto.ran.trafficsim.types.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLng();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float lat = 1;
 * @return {number}
 */
proto.ran.trafficsim.types.Point.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Point} returns this
 */
proto.ran.trafficsim.types.Point.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float lng = 2;
 * @return {number}
 */
proto.ran.trafficsim.types.Point.prototype.getLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Point} returns this
 */
proto.ran.trafficsim.types.Point.prototype.setLng = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.Sector.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.Sector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.Sector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Sector.toObject = function(includeInstance, msg) {
  var f, obj = {
    azimuth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arc: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.Sector}
 */
proto.ran.trafficsim.types.Sector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.Sector;
  return proto.ran.trafficsim.types.Sector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.Sector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.Sector}
 */
proto.ran.trafficsim.types.Sector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAzimuth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.Sector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.Sector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.Sector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Sector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAzimuth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getArc();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 azimuth = 1;
 * @return {number}
 */
proto.ran.trafficsim.types.Sector.prototype.getAzimuth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Sector} returns this
 */
proto.ran.trafficsim.types.Sector.prototype.setAzimuth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 arc = 2;
 * @return {number}
 */
proto.ran.trafficsim.types.Sector.prototype.getArc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Sector} returns this
 */
proto.ran.trafficsim.types.Sector.prototype.setArc = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ran.trafficsim.types.Route.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    waypointsList: jspb.Message.toObjectList(msg.getWaypointsList(),
    proto.ran.trafficsim.types.Point.toObject, includeInstance),
    color: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.Route}
 */
proto.ran.trafficsim.types.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.Route;
  return proto.ran.trafficsim.types.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.Route}
 */
proto.ran.trafficsim.types.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.ran.trafficsim.types.Point;
      reader.readMessage(value,proto.ran.trafficsim.types.Point.deserializeBinaryFromReader);
      msg.addWaypoints(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWaypointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ran.trafficsim.types.Point.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 name = 1;
 * @return {number}
 */
proto.ran.trafficsim.types.Route.prototype.getName = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Route} returns this
 */
proto.ran.trafficsim.types.Route.prototype.setName = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Point waypoints = 2;
 * @return {!Array<!proto.ran.trafficsim.types.Point>}
 */
proto.ran.trafficsim.types.Route.prototype.getWaypointsList = function() {
  return /** @type{!Array<!proto.ran.trafficsim.types.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ran.trafficsim.types.Point, 2));
};


/**
 * @param {!Array<!proto.ran.trafficsim.types.Point>} value
 * @return {!proto.ran.trafficsim.types.Route} returns this
*/
proto.ran.trafficsim.types.Route.prototype.setWaypointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ran.trafficsim.types.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Route.prototype.addWaypoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ran.trafficsim.types.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ran.trafficsim.types.Route} returns this
 */
proto.ran.trafficsim.types.Route.prototype.clearWaypointsList = function() {
  return this.setWaypointsList([]);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.ran.trafficsim.types.Route.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ran.trafficsim.types.Route} returns this
 */
proto.ran.trafficsim.types.Route.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.Ue.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.Ue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.Ue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Ue.toObject = function(includeInstance, msg) {
  var f, obj = {
    imsi: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    position: (f = msg.getPosition()) && proto.ran.trafficsim.types.Point.toObject(includeInstance, f),
    rotation: jspb.Message.getFieldWithDefault(msg, 5, 0),
    servingTower: (f = msg.getServingTower()) && proto.ran.trafficsim.types.ECGI.toObject(includeInstance, f),
    servingTowerDist: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    tower1: (f = msg.getTower1()) && proto.ran.trafficsim.types.ECGI.toObject(includeInstance, f),
    tower1Dist: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    tower2: (f = msg.getTower2()) && proto.ran.trafficsim.types.ECGI.toObject(includeInstance, f),
    tower2Dist: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    tower3: (f = msg.getTower3()) && proto.ran.trafficsim.types.ECGI.toObject(includeInstance, f),
    tower3Dist: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    crnti: jspb.Message.getFieldWithDefault(msg, 15, ""),
    admitted: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    metrics: (f = msg.getMetrics()) && proto.ran.trafficsim.types.UeMetrics.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.Ue}
 */
proto.ran.trafficsim.types.Ue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.Ue;
  return proto.ran.trafficsim.types.Ue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.Ue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.Ue}
 */
proto.ran.trafficsim.types.Ue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setImsi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.ran.trafficsim.types.Point;
      reader.readMessage(value,proto.ran.trafficsim.types.Point.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRotation(value);
      break;
    case 7:
      var value = new proto.ran.trafficsim.types.ECGI;
      reader.readMessage(value,proto.ran.trafficsim.types.ECGI.deserializeBinaryFromReader);
      msg.setServingTower(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setServingTowerDist(value);
      break;
    case 9:
      var value = new proto.ran.trafficsim.types.ECGI;
      reader.readMessage(value,proto.ran.trafficsim.types.ECGI.deserializeBinaryFromReader);
      msg.setTower1(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTower1Dist(value);
      break;
    case 11:
      var value = new proto.ran.trafficsim.types.ECGI;
      reader.readMessage(value,proto.ran.trafficsim.types.ECGI.deserializeBinaryFromReader);
      msg.setTower2(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTower2Dist(value);
      break;
    case 13:
      var value = new proto.ran.trafficsim.types.ECGI;
      reader.readMessage(value,proto.ran.trafficsim.types.ECGI.deserializeBinaryFromReader);
      msg.setTower3(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTower3Dist(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrnti(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmitted(value);
      break;
    case 17:
      var value = new proto.ran.trafficsim.types.UeMetrics;
      reader.readMessage(value,proto.ran.trafficsim.types.UeMetrics.deserializeBinaryFromReader);
      msg.setMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.Ue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.Ue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.Ue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Ue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImsi();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ran.trafficsim.types.Point.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getServingTower();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ran.trafficsim.types.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getServingTowerDist();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getTower1();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ran.trafficsim.types.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getTower1Dist();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getTower2();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ran.trafficsim.types.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getTower2Dist();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getTower3();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ran.trafficsim.types.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getTower3Dist();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getCrnti();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getAdmitted();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getMetrics();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.ran.trafficsim.types.UeMetrics.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 imsi = 1;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getImsi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.setImsi = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.ran.trafficsim.types.Ue.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Point position = 4;
 * @return {?proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Ue.prototype.getPosition = function() {
  return /** @type{?proto.ran.trafficsim.types.Point} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.Point, 4));
};


/**
 * @param {?proto.ran.trafficsim.types.Point|undefined} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
*/
proto.ran.trafficsim.types.Ue.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Ue.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 rotation = 5;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.setRotation = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional ECGI serving_tower = 7;
 * @return {?proto.ran.trafficsim.types.ECGI}
 */
proto.ran.trafficsim.types.Ue.prototype.getServingTower = function() {
  return /** @type{?proto.ran.trafficsim.types.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.ECGI, 7));
};


/**
 * @param {?proto.ran.trafficsim.types.ECGI|undefined} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
*/
proto.ran.trafficsim.types.Ue.prototype.setServingTower = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.clearServingTower = function() {
  return this.setServingTower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Ue.prototype.hasServingTower = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float serving_tower_dist = 8;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getServingTowerDist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.setServingTowerDist = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional ECGI tower1 = 9;
 * @return {?proto.ran.trafficsim.types.ECGI}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower1 = function() {
  return /** @type{?proto.ran.trafficsim.types.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.ECGI, 9));
};


/**
 * @param {?proto.ran.trafficsim.types.ECGI|undefined} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
*/
proto.ran.trafficsim.types.Ue.prototype.setTower1 = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.clearTower1 = function() {
  return this.setTower1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Ue.prototype.hasTower1 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float tower1_dist = 10;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower1Dist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.setTower1Dist = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional ECGI tower2 = 11;
 * @return {?proto.ran.trafficsim.types.ECGI}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower2 = function() {
  return /** @type{?proto.ran.trafficsim.types.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.ECGI, 11));
};


/**
 * @param {?proto.ran.trafficsim.types.ECGI|undefined} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
*/
proto.ran.trafficsim.types.Ue.prototype.setTower2 = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.clearTower2 = function() {
  return this.setTower2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Ue.prototype.hasTower2 = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float tower2_dist = 12;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower2Dist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.setTower2Dist = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional ECGI tower3 = 13;
 * @return {?proto.ran.trafficsim.types.ECGI}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower3 = function() {
  return /** @type{?proto.ran.trafficsim.types.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.ECGI, 13));
};


/**
 * @param {?proto.ran.trafficsim.types.ECGI|undefined} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
*/
proto.ran.trafficsim.types.Ue.prototype.setTower3 = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.clearTower3 = function() {
  return this.setTower3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Ue.prototype.hasTower3 = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float tower3_dist = 14;
 * @return {number}
 */
proto.ran.trafficsim.types.Ue.prototype.getTower3Dist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.setTower3Dist = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional string crnti = 15;
 * @return {string}
 */
proto.ran.trafficsim.types.Ue.prototype.getCrnti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.setCrnti = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional bool admitted = 16;
 * @return {boolean}
 */
proto.ran.trafficsim.types.Ue.prototype.getAdmitted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.setAdmitted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional UeMetrics metrics = 17;
 * @return {?proto.ran.trafficsim.types.UeMetrics}
 */
proto.ran.trafficsim.types.Ue.prototype.getMetrics = function() {
  return /** @type{?proto.ran.trafficsim.types.UeMetrics} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.UeMetrics, 17));
};


/**
 * @param {?proto.ran.trafficsim.types.UeMetrics|undefined} value
 * @return {!proto.ran.trafficsim.types.Ue} returns this
*/
proto.ran.trafficsim.types.Ue.prototype.setMetrics = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.Ue} returns this
 */
proto.ran.trafficsim.types.Ue.prototype.clearMetrics = function() {
  return this.setMetrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Ue.prototype.hasMetrics = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.UeMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.UeMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.UeMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.UeMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    hoLatency: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hoReportTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isfirst: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.UeMetrics}
 */
proto.ran.trafficsim.types.UeMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.UeMetrics;
  return proto.ran.trafficsim.types.UeMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.UeMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.UeMetrics}
 */
proto.ran.trafficsim.types.UeMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHoLatency(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHoReportTimestamp(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfirst(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.UeMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.UeMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.UeMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.UeMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHoLatency();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHoReportTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIsfirst();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 ho_latency = 1;
 * @return {number}
 */
proto.ran.trafficsim.types.UeMetrics.prototype.getHoLatency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.UeMetrics} returns this
 */
proto.ran.trafficsim.types.UeMetrics.prototype.setHoLatency = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ho_report_timestamp = 2;
 * @return {number}
 */
proto.ran.trafficsim.types.UeMetrics.prototype.getHoReportTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.UeMetrics} returns this
 */
proto.ran.trafficsim.types.UeMetrics.prototype.setHoReportTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool isFirst = 3;
 * @return {boolean}
 */
proto.ran.trafficsim.types.UeMetrics.prototype.getIsfirst = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ran.trafficsim.types.UeMetrics} returns this
 */
proto.ran.trafficsim.types.UeMetrics.prototype.setIsfirst = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.TowersParams.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.TowersParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.TowersParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.TowersParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    towerrows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    towercols: jspb.Message.getFieldWithDefault(msg, 2, 0),
    towerspacingvert: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    towerspacinghoriz: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    locationsscale: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    maxuespercell: jspb.Message.getFieldWithDefault(msg, 6, 0),
    avgcellspertower: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.TowersParams}
 */
proto.ran.trafficsim.types.TowersParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.TowersParams;
  return proto.ran.trafficsim.types.TowersParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.TowersParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.TowersParams}
 */
proto.ran.trafficsim.types.TowersParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTowerrows(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTowercols(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTowerspacingvert(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTowerspacinghoriz(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLocationsscale(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxuespercell(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvgcellspertower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.TowersParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.TowersParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.TowersParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.TowersParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTowerrows();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTowercols();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTowerspacingvert();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTowerspacinghoriz();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getLocationsscale();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getMaxuespercell();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAvgcellspertower();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional uint32 towerRows = 1;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getTowerrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.TowersParams} returns this
 */
proto.ran.trafficsim.types.TowersParams.prototype.setTowerrows = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 towerCols = 2;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getTowercols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.TowersParams} returns this
 */
proto.ran.trafficsim.types.TowersParams.prototype.setTowercols = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float towerSpacingVert = 3;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getTowerspacingvert = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.TowersParams} returns this
 */
proto.ran.trafficsim.types.TowersParams.prototype.setTowerspacingvert = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float towerSpacingHoriz = 4;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getTowerspacinghoriz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.TowersParams} returns this
 */
proto.ran.trafficsim.types.TowersParams.prototype.setTowerspacinghoriz = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float locationsScale = 5;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getLocationsscale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.TowersParams} returns this
 */
proto.ran.trafficsim.types.TowersParams.prototype.setLocationsscale = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional uint32 maxUEsPerCell = 6;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getMaxuespercell = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.TowersParams} returns this
 */
proto.ran.trafficsim.types.TowersParams.prototype.setMaxuespercell = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float avgCellsPerTower = 7;
 * @return {number}
 */
proto.ran.trafficsim.types.TowersParams.prototype.getAvgcellspertower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.TowersParams} returns this
 */
proto.ran.trafficsim.types.TowersParams.prototype.setAvgcellspertower = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.ECGI.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.ECGI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.ECGI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.ECGI.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plmnid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.ECGI}
 */
proto.ran.trafficsim.types.ECGI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.ECGI;
  return proto.ran.trafficsim.types.ECGI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.ECGI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.ECGI}
 */
proto.ran.trafficsim.types.ECGI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEcid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlmnid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.ECGI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.ECGI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.ECGI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.ECGI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlmnid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ecID = 1;
 * @return {string}
 */
proto.ran.trafficsim.types.ECGI.prototype.getEcid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ran.trafficsim.types.ECGI} returns this
 */
proto.ran.trafficsim.types.ECGI.prototype.setEcid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plmnID = 2;
 * @return {string}
 */
proto.ran.trafficsim.types.ECGI.prototype.getPlmnid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ran.trafficsim.types.ECGI} returns this
 */
proto.ran.trafficsim.types.ECGI.prototype.setPlmnid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ran.trafficsim.types.Cell.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.Cell.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.Cell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.Cell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Cell.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecgi: (f = msg.getEcgi()) && proto.ran.trafficsim.types.ECGI.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.ran.trafficsim.types.Point.toObject(includeInstance, f),
    sector: (f = msg.getSector()) && proto.ran.trafficsim.types.Sector.toObject(includeInstance, f),
    color: jspb.Message.getFieldWithDefault(msg, 5, ""),
    maxues: jspb.Message.getFieldWithDefault(msg, 6, 0),
    neighborsList: jspb.Message.toObjectList(msg.getNeighborsList(),
    proto.ran.trafficsim.types.ECGI.toObject, includeInstance),
    txpowerdb: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    crntimapMap: (f = msg.getCrntimapMap()) ? f.toObject(includeInstance, undefined) : [],
    crntiindex: jspb.Message.getFieldWithDefault(msg, 10, 0),
    port: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.Cell}
 */
proto.ran.trafficsim.types.Cell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.Cell;
  return proto.ran.trafficsim.types.Cell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.Cell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.Cell}
 */
proto.ran.trafficsim.types.Cell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ran.trafficsim.types.ECGI;
      reader.readMessage(value,proto.ran.trafficsim.types.ECGI.deserializeBinaryFromReader);
      msg.setEcgi(value);
      break;
    case 3:
      var value = new proto.ran.trafficsim.types.Point;
      reader.readMessage(value,proto.ran.trafficsim.types.Point.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = new proto.ran.trafficsim.types.Sector;
      reader.readMessage(value,proto.ran.trafficsim.types.Sector.deserializeBinaryFromReader);
      msg.setSector(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxues(value);
      break;
    case 7:
      var value = new proto.ran.trafficsim.types.ECGI;
      reader.readMessage(value,proto.ran.trafficsim.types.ECGI.deserializeBinaryFromReader);
      msg.addNeighbors(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTxpowerdb(value);
      break;
    case 9:
      var value = msg.getCrntimapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "", 0);
         });
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCrntiindex(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.Cell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.Cell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.Cell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.Cell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcgi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ran.trafficsim.types.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ran.trafficsim.types.Point.serializeBinaryToWriter
    );
  }
  f = message.getSector();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ran.trafficsim.types.Sector.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMaxues();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getNeighborsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ran.trafficsim.types.ECGI.serializeBinaryToWriter
    );
  }
  f = message.getTxpowerdb();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getCrntimapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getCrntiindex();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional ECGI ecgi = 1;
 * @return {?proto.ran.trafficsim.types.ECGI}
 */
proto.ran.trafficsim.types.Cell.prototype.getEcgi = function() {
  return /** @type{?proto.ran.trafficsim.types.ECGI} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.ECGI, 1));
};


/**
 * @param {?proto.ran.trafficsim.types.ECGI|undefined} value
 * @return {!proto.ran.trafficsim.types.Cell} returns this
*/
proto.ran.trafficsim.types.Cell.prototype.setEcgi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.clearEcgi = function() {
  return this.setEcgi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Cell.prototype.hasEcgi = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Point location = 3;
 * @return {?proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.Cell.prototype.getLocation = function() {
  return /** @type{?proto.ran.trafficsim.types.Point} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.Point, 3));
};


/**
 * @param {?proto.ran.trafficsim.types.Point|undefined} value
 * @return {!proto.ran.trafficsim.types.Cell} returns this
*/
proto.ran.trafficsim.types.Cell.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Cell.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Sector sector = 4;
 * @return {?proto.ran.trafficsim.types.Sector}
 */
proto.ran.trafficsim.types.Cell.prototype.getSector = function() {
  return /** @type{?proto.ran.trafficsim.types.Sector} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.Sector, 4));
};


/**
 * @param {?proto.ran.trafficsim.types.Sector|undefined} value
 * @return {!proto.ran.trafficsim.types.Cell} returns this
*/
proto.ran.trafficsim.types.Cell.prototype.setSector = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.clearSector = function() {
  return this.setSector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.Cell.prototype.hasSector = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string color = 5;
 * @return {string}
 */
proto.ran.trafficsim.types.Cell.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 maxUEs = 6;
 * @return {number}
 */
proto.ran.trafficsim.types.Cell.prototype.getMaxues = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.setMaxues = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated ECGI neighbors = 7;
 * @return {!Array<!proto.ran.trafficsim.types.ECGI>}
 */
proto.ran.trafficsim.types.Cell.prototype.getNeighborsList = function() {
  return /** @type{!Array<!proto.ran.trafficsim.types.ECGI>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ran.trafficsim.types.ECGI, 7));
};


/**
 * @param {!Array<!proto.ran.trafficsim.types.ECGI>} value
 * @return {!proto.ran.trafficsim.types.Cell} returns this
*/
proto.ran.trafficsim.types.Cell.prototype.setNeighborsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ran.trafficsim.types.ECGI=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ran.trafficsim.types.ECGI}
 */
proto.ran.trafficsim.types.Cell.prototype.addNeighbors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ran.trafficsim.types.ECGI, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.clearNeighborsList = function() {
  return this.setNeighborsList([]);
};


/**
 * optional float txPowerdB = 8;
 * @return {number}
 */
proto.ran.trafficsim.types.Cell.prototype.getTxpowerdb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.setTxpowerdb = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * map<string, uint64> crntiMap = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.ran.trafficsim.types.Cell.prototype.getCrntimapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.clearCrntimapMap = function() {
  this.getCrntimapMap().clear();
  return this;};


/**
 * optional uint32 crntiIndex = 10;
 * @return {number}
 */
proto.ran.trafficsim.types.Cell.prototype.getCrntiindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.setCrntiindex = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 port = 11;
 * @return {number}
 */
proto.ran.trafficsim.types.Cell.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.Cell} returns this
 */
proto.ran.trafficsim.types.Cell.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ran.trafficsim.types.MapLayout.prototype.toObject = function(opt_includeInstance) {
  return proto.ran.trafficsim.types.MapLayout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ran.trafficsim.types.MapLayout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.MapLayout.toObject = function(includeInstance, msg) {
  var f, obj = {
    center: (f = msg.getCenter()) && proto.ran.trafficsim.types.Point.toObject(includeInstance, f),
    zoom: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    fade: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    showroutes: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    showpower: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    minUes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxUes: jspb.Message.getFieldWithDefault(msg, 7, 0),
    currentRoutes: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ran.trafficsim.types.MapLayout}
 */
proto.ran.trafficsim.types.MapLayout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ran.trafficsim.types.MapLayout;
  return proto.ran.trafficsim.types.MapLayout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ran.trafficsim.types.MapLayout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ran.trafficsim.types.MapLayout}
 */
proto.ran.trafficsim.types.MapLayout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ran.trafficsim.types.Point;
      reader.readMessage(value,proto.ran.trafficsim.types.Point.deserializeBinaryFromReader);
      msg.setCenter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZoom(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFade(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowroutes(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowpower(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinUes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxUes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentRoutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ran.trafficsim.types.MapLayout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ran.trafficsim.types.MapLayout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ran.trafficsim.types.MapLayout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ran.trafficsim.types.MapLayout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ran.trafficsim.types.Point.serializeBinaryToWriter
    );
  }
  f = message.getZoom();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getFade();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getShowroutes();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getShowpower();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMinUes();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMaxUes();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getCurrentRoutes();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional Point center = 1;
 * @return {?proto.ran.trafficsim.types.Point}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getCenter = function() {
  return /** @type{?proto.ran.trafficsim.types.Point} */ (
    jspb.Message.getWrapperField(this, proto.ran.trafficsim.types.Point, 1));
};


/**
 * @param {?proto.ran.trafficsim.types.Point|undefined} value
 * @return {!proto.ran.trafficsim.types.MapLayout} returns this
*/
proto.ran.trafficsim.types.MapLayout.prototype.setCenter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ran.trafficsim.types.MapLayout} returns this
 */
proto.ran.trafficsim.types.MapLayout.prototype.clearCenter = function() {
  return this.setCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ran.trafficsim.types.MapLayout.prototype.hasCenter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float zoom = 2;
 * @return {number}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getZoom = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.MapLayout} returns this
 */
proto.ran.trafficsim.types.MapLayout.prototype.setZoom = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool fade = 3;
 * @return {boolean}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getFade = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ran.trafficsim.types.MapLayout} returns this
 */
proto.ran.trafficsim.types.MapLayout.prototype.setFade = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool showRoutes = 4;
 * @return {boolean}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getShowroutes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ran.trafficsim.types.MapLayout} returns this
 */
proto.ran.trafficsim.types.MapLayout.prototype.setShowroutes = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool showPower = 5;
 * @return {boolean}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getShowpower = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ran.trafficsim.types.MapLayout} returns this
 */
proto.ran.trafficsim.types.MapLayout.prototype.setShowpower = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 min_ues = 6;
 * @return {number}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getMinUes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.MapLayout} returns this
 */
proto.ran.trafficsim.types.MapLayout.prototype.setMinUes = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 max_ues = 7;
 * @return {number}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getMaxUes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.MapLayout} returns this
 */
proto.ran.trafficsim.types.MapLayout.prototype.setMaxUes = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 current_routes = 8;
 * @return {number}
 */
proto.ran.trafficsim.types.MapLayout.prototype.getCurrentRoutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ran.trafficsim.types.MapLayout} returns this
 */
proto.ran.trafficsim.types.MapLayout.prototype.setCurrentRoutes = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


goog.object.extend(exports, proto.ran.trafficsim.types);
